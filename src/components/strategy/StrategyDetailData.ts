
import type { StrategyDetails } from "./types";

// Mock data for the strategy details - in a real app, this would come from your API
export const getStrategyDetails = (id: string): StrategyDetails | null => {
  const strategies: Record<string, StrategyDetails> = {
    "rsi": {
      id: "rsi",
      name: "RSI (Relative Strength Index)",
      description: "RSI measures the magnitude of recent price changes to evaluate overbought or oversold conditions.",
      longDescription: "The Relative Strength Index (RSI) is a momentum oscillator that measures the speed and change of price movements. The RSI oscillates between zero and 100. Traditionally, and according to Wilder, RSI is considered overbought when above 70 and oversold when below 30. Signals can also be generated by looking for divergences, failure swings and centerline crossovers.",
      type: "oscillator",
      isPremium: false,
      parameters: {
        period: 14,
        overbought: 70,
        oversold: 30
      },
      riskLevel: "medium",
      performanceMetrics: {
        winRate: "62%",
        profitFactor: 1.8,
        maxDrawdown: "15%",
        sharpeRatio: 1.2,
        avgTrade: "+0.8%",
        expectancy: 1.25
      },
      tradingRules: [
        "Buy when RSI crosses above the oversold level (default 30)",
        "Sell when RSI crosses below the overbought level (default 70)",
        "Consider market direction for better results",
        "Use longer periods for less false signals",
        "Look for divergence between price and RSI for stronger signals"
      ]
    },
    "bollinger": {
      id: "bollinger",
      name: "Bollinger Bands",
      description: "A volatility indicator that creates bands above and below a moving average to identify overbought/oversold conditions.",
      longDescription: "Bollinger Bands consist of a middle band being an N-period simple moving average (SMA), an upper band at K times an N-period standard deviation above the middle band, and a lower band at K times an N-period standard deviation below the middle band. Typical values for N and K are 20 and 2, respectively.",
      type: "volatility",
      isPremium: false,
      parameters: {
        period: 20,
        stdDev: 2,
        maType: "SMA"
      },
      riskLevel: "medium",
      performanceMetrics: {
        winRate: "58%",
        profitFactor: 1.6,
        maxDrawdown: "18%",
        sharpeRatio: 1.1,
        avgTrade: "+0.7%",
        expectancy: 1.15
      },
      tradingRules: [
        "Buy when price touches or crosses below the lower band",
        "Sell when price touches or crosses above the upper band",
        "Watch for 'band squeeze' (low volatility) before breakouts",
        "Use band width to gauge volatility",
        "Combine with trend indicators for confirmation"
      ]
    },
    "macd": {
      id: "macd",
      name: "MACD (Moving Average Convergence Divergence)",
      description: "A trend-following momentum indicator that shows the relationship between two moving averages of a security's price.",
      longDescription: "MACD is calculated by subtracting the 26-period Exponential Moving Average (EMA) from the 12-period EMA. The result of that calculation is the MACD line. A nine-day EMA of the MACD, called the 'signal line,' is then plotted on top of the MACD line, which can function as a trigger for buy and sell signals.",
      type: "momentum",
      isPremium: true,
      parameters: {
        fastPeriod: 12,
        slowPeriod: 26,
        signalPeriod: 9
      },
      riskLevel: "high",
      performanceMetrics: {
        winRate: "65%",
        profitFactor: 2.1,
        maxDrawdown: "22%",
        sharpeRatio: 1.4,
        avgTrade: "+1.1%",
        expectancy: 1.45
      },
      tradingRules: [
        "Buy when MACD line crosses above the signal line",
        "Sell when MACD line crosses below the signal line",
        "Confirm signals with histogram direction",
        "Look for divergence between price and MACD for stronger signals",
        "Higher timeframes provide more reliable signals"
      ]
    }
  };

  return strategies[id] || null;
};

// Add the missing getStrategyById function by aliasing getStrategyDetails
export const getStrategyById = getStrategyDetails;
