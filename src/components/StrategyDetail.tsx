
import { useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  ArrowLeft, 
  BarChart2, 
  Settings, 
  AlertTriangle, 
  Info,
  Lock,
  LineChart
} from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Form, FormField, FormItem, FormLabel, FormControl, FormDescription } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Slider } from "@/components/ui/slider";
import { useForm } from "react-hook-form";
import type { Strategy } from "@/components/Strategy";

// Define specific parameter types for different strategies
type RsiParameters = {
  period: number;
  overbought: number;
  oversold: number;
};

type BollingerParameters = {
  period: number;
  stdDev: number;
  maType: string;
};

type MacdParameters = {
  fastPeriod: number;
  slowPeriod: number;
  signalPeriod: number;
};

type StrategyDetails = Strategy & {
  longDescription: string;
  tradingRules: string[];
  performanceMetrics: {
    winRate: string;
    profitFactor: number;
    maxDrawdown: string;
    sharpeRatio: number;
    avgTrade: string;
    expectancy: number;
  };
};

// Mock data for the strategy details - in a real app, this would come from your API
const getStrategyDetails = (id: string): StrategyDetails | null => {
  const strategies: Record<string, StrategyDetails> = {
    "rsi": {
      id: "rsi",
      name: "RSI (Relative Strength Index)",
      description: "RSI measures the magnitude of recent price changes to evaluate overbought or oversold conditions.",
      longDescription: "The Relative Strength Index (RSI) is a momentum oscillator that measures the speed and change of price movements. The RSI oscillates between zero and 100. Traditionally, and according to Wilder, RSI is considered overbought when above 70 and oversold when below 30. Signals can also be generated by looking for divergences, failure swings and centerline crossovers.",
      type: "oscillator",
      isPremium: false,
      parameters: {
        period: 14,
        overbought: 70,
        oversold: 30
      },
      riskLevel: "medium",
      performanceMetrics: {
        winRate: "62%",
        profitFactor: 1.8,
        maxDrawdown: "15%",
        sharpeRatio: 1.2,
        avgTrade: "+0.8%",
        expectancy: 1.25
      },
      tradingRules: [
        "Buy when RSI crosses above the oversold level (default 30)",
        "Sell when RSI crosses below the overbought level (default 70)",
        "Consider market direction for better results",
        "Use longer periods for less false signals",
        "Look for divergence between price and RSI for stronger signals"
      ]
    },
    "bollinger": {
      id: "bollinger",
      name: "Bollinger Bands",
      description: "A volatility indicator that creates bands above and below a moving average to identify overbought/oversold conditions.",
      longDescription: "Bollinger Bands consist of a middle band being an N-period simple moving average (SMA), an upper band at K times an N-period standard deviation above the middle band, and a lower band at K times an N-period standard deviation below the middle band. Typical values for N and K are 20 and 2, respectively.",
      type: "volatility",
      isPremium: false,
      parameters: {
        period: 20,
        stdDev: 2,
        maType: "SMA"
      },
      riskLevel: "medium",
      performanceMetrics: {
        winRate: "58%",
        profitFactor: 1.6,
        maxDrawdown: "18%",
        sharpeRatio: 1.1,
        avgTrade: "+0.7%",
        expectancy: 1.15
      },
      tradingRules: [
        "Buy when price touches or crosses below the lower band",
        "Sell when price touches or crosses above the upper band",
        "Watch for 'band squeeze' (low volatility) before breakouts",
        "Use band width to gauge volatility",
        "Combine with trend indicators for confirmation"
      ]
    },
    "macd": {
      id: "macd",
      name: "MACD (Moving Average Convergence Divergence)",
      description: "A trend-following momentum indicator that shows the relationship between two moving averages of a security's price.",
      longDescription: "MACD is calculated by subtracting the 26-period Exponential Moving Average (EMA) from the 12-period EMA. The result of that calculation is the MACD line. A nine-day EMA of the MACD, called the 'signal line,' is then plotted on top of the MACD line, which can function as a trigger for buy and sell signals.",
      type: "momentum",
      isPremium: true,
      parameters: {
        fastPeriod: 12,
        slowPeriod: 26,
        signalPeriod: 9
      },
      riskLevel: "high",
      performanceMetrics: {
        winRate: "65%",
        profitFactor: 2.1,
        maxDrawdown: "22%",
        sharpeRatio: 1.4,
        avgTrade: "+1.1%",
        expectancy: 1.45
      },
      tradingRules: [
        "Buy when MACD line crosses above the signal line",
        "Sell when MACD line crosses below the signal line",
        "Confirm signals with histogram direction",
        "Look for divergence between price and MACD for stronger signals",
        "Higher timeframes provide more reliable signals"
      ]
    }
  };

  return strategies[id] || null;
};

export function StrategyDetail() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState("overview");
  
  const strategy = id ? getStrategyDetails(id) : null;

  // Create a dynamic form based on the strategy type
  const form = useForm({
    defaultValues: strategy?.parameters || {}
  });

  if (!strategy) {
    return (
      <div className="flex flex-col items-center justify-center h-screen">
        <h1 className="text-xl font-bold mb-4">Strategy not found</h1>
        <Button onClick={() => navigate('/strategies')}>
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Strategies
        </Button>
      </div>
    );
  }

  const handleDeployStrategy = () => {
    // Here you would typically integrate with your backend
    // to deploy the strategy with the configured parameters
    console.log("Deploying strategy:", strategy.id);
    console.log("With parameters:", form.getValues());
    
    // Navigate back to dashboard or to a confirmation page
    navigate('/dashboard');
  };

  const getRiskBadgeColor = (risk: string) => {
    switch (risk) {
      case "low":
        return "bg-green-100 text-green-800 hover:bg-green-100";
      case "medium":
        return "bg-yellow-100 text-yellow-800 hover:bg-yellow-100";
      case "high":
        return "bg-red-100 text-red-800 hover:bg-red-100";
      default:
        return "bg-gray-100 text-gray-800 hover:bg-gray-100";
    }
  };

  const getTypeBadgeColor = (type: string) => {
    switch (type) {
      case "oscillator":
        return "bg-blue-100 text-blue-800 hover:bg-blue-100";
      case "trend":
        return "bg-purple-100 text-purple-800 hover:bg-purple-100";
      case "volatility":
        return "bg-indigo-100 text-indigo-800 hover:bg-indigo-100";
      case "momentum":
        return "bg-orange-100 text-orange-800 hover:bg-orange-100";
      default:
        return "bg-gray-100 text-gray-800 hover:bg-gray-100";
    }
  };

  return (
    <div className="min-h-screen bg-background flex flex-col">
      <header className="w-full px-4 py-4 border-b flex items-center justify-between bg-card">
        <div className="flex items-center gap-2">
          <div className="h-8 w-8 rounded-md bg-trading-navy text-white flex items-center justify-center">
            <LineChart className="h-5 w-5" />
          </div>
          <span className="font-semibold text-lg">TradingBot</span>
        </div>

        <div className="flex items-center gap-4">
          <button 
            onClick={() => navigate('/dashboard')}
            className="text-sm font-medium hover:underline"
          >
            Dashboard
          </button>
          <button 
            onClick={() => navigate('/strategies')}
            className="text-sm font-medium text-primary hover:underline"
          >
            Strategies
          </button>
        </div>
      </header>

      <main className="flex-1 p-6">
        <div className="max-w-4xl mx-auto">
          <div className="mb-6 flex items-center justify-between">
            <Button 
              variant="outline" 
              size="sm" 
              className="flex items-center" 
              onClick={() => navigate('/strategies')}
            >
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Strategies
            </Button>
            
            {strategy.isPremium && (
              <Badge variant="outline" className="bg-primary/10 text-primary flex items-center gap-1">
                <Lock className="h-3 w-3" />
                Premium Strategy
              </Badge>
            )}
          </div>

          <Card className="mb-6">
            <CardHeader>
              <div className="flex flex-wrap gap-2 mb-2">
                <Badge variant="outline" className={getTypeBadgeColor(strategy.type)}>
                  {strategy.type.charAt(0).toUpperCase() + strategy.type.slice(1)}
                </Badge>
                <Badge variant="outline" className={getRiskBadgeColor(strategy.riskLevel)}>
                  <AlertTriangle className="h-3 w-3 mr-1" />
                  {strategy.riskLevel.charAt(0).toUpperCase() + strategy.riskLevel.slice(1)} Risk
                </Badge>
              </div>
              <CardTitle className="text-2xl">{strategy.name}</CardTitle>
              <CardDescription className="mt-1">{strategy.description}</CardDescription>
            </CardHeader>
          </Card>

          <Tabs 
            defaultValue="overview" 
            value={activeTab}
            onValueChange={setActiveTab}
            className="mt-6"
          >
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="overview" className="flex items-center">
                <Info className="h-4 w-4 mr-2" />
                Overview
              </TabsTrigger>
              <TabsTrigger value="performance" className="flex items-center">
                <BarChart2 className="h-4 w-4 mr-2" />
                Performance
              </TabsTrigger>
              <TabsTrigger value="configuration" className="flex items-center">
                <Settings className="h-4 w-4 mr-2" />
                Configuration
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="overview" className="mt-4">
              <Card>
                <CardHeader>
                  <CardTitle>Strategy Overview</CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div>
                    <h3 className="text-lg font-medium mb-2">Description</h3>
                    <p className="text-muted-foreground">{strategy.longDescription}</p>
                  </div>
                  
                  <div>
                    <h3 className="text-lg font-medium mb-2">Trading Rules</h3>
                    <ul className="list-disc pl-5 space-y-1">
                      {strategy.tradingRules.map((rule, index) => (
                        <li key={index} className="text-muted-foreground">{rule}</li>
                      ))}
                    </ul>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="performance" className="mt-4">
              <Card>
                <CardHeader>
                  <CardTitle>Performance Metrics</CardTitle>
                  <CardDescription>
                    Historical performance metrics based on backtesting against 5 years of market data.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    {Object.entries(strategy.performanceMetrics).map(([key, value]) => (
                      <div key={key} className="bg-card p-4 rounded-md border">
                        <div className="text-sm text-muted-foreground">
                          {key.replace(/([A-Z])/g, ' $1').replace(/^./, (str) => str.toUpperCase())}
                        </div>
                        <div className="text-xl font-medium mt-1">{value}</div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="configuration" className="mt-4">
              <Card>
                <CardHeader>
                  <CardTitle>Strategy Configuration</CardTitle>
                  <CardDescription>
                    Adjust the parameters to optimize the strategy for your trading style.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Form {...form}>
                    <div className="space-y-6">
                      {Object.entries(strategy.parameters).map(([key, value]) => {
                        const isNumeric = typeof value === 'number';
                        
                        return (
                          <FormField
                            key={key}
                            control={form.control}
                            name={key as any}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel className="text-base">
                                  {key.replace(/([A-Z])/g, ' $1').replace(/^./, (str) => str.toUpperCase())}
                                </FormLabel>
                                <FormControl>
                                  {isNumeric ? (
                                    <div className="flex flex-col space-y-2">
                                      <div className="flex items-center space-x-4">
                                        <Slider
                                          value={[field.value]}
                                          min={Math.max(1, Math.floor(field.value / 2))}
                                          max={Math.ceil(field.value * 2)}
                                          step={1}
                                          onValueChange={(vals) => field.onChange(vals[0])}
                                        />
                                        <Input
                                          type="number"
                                          className="w-20"
                                          value={field.value}
                                          onChange={(e) => field.onChange(parseFloat(e.target.value))}
                                        />
                                      </div>
                                    </div>
                                  ) : (
                                    <Input {...field} />
                                  )}
                                </FormControl>
                                <FormDescription>
                                  {isNumeric
                                    ? `Default value: ${value}`
                                    : `Enter a valid ${typeof value}`}
                                </FormDescription>
                              </FormItem>
                            )}
                          />
                        );
                      })}
                    </div>
                  </Form>
                </CardContent>
                <CardFooter className="flex justify-between">
                  <Button variant="outline" onClick={() => {
                    // Type-safe reset
                    form.reset(strategy.parameters);
                  }}>
                    Reset to Defaults
                  </Button>
                  <Button onClick={() => setActiveTab("overview")}>
                    Save Configuration
                  </Button>
                </CardFooter>
              </Card>
            </TabsContent>
          </Tabs>

          <div className="mt-8 flex justify-end">
            <Button 
              size="lg" 
              onClick={handleDeployStrategy}
              disabled={strategy.isPremium}
            >
              {strategy.isPremium ? 'Upgrade to Deploy' : 'Deploy Strategy'}
            </Button>
          </div>
        </div>
      </main>
    </div>
  );
}
